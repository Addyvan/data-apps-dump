{"ast":null,"code":"import _classCallCheck from \"/home/addy/Documents/collab-admin-functions-prototype/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/addy/Documents/collab-admin-functions-prototype/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/addy/Documents/collab-admin-functions-prototype/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/addy/Documents/collab-admin-functions-prototype/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/addy/Documents/collab-admin-functions-prototype/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/home/addy/Documents/collab-admin-functions-prototype/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/addy/Documents/collab-admin-functions-prototype/src/dataproviders/UserDataProvider.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query GetUser($id: ID) {\\n        {\\n            user(\\n                id: $id\\n            ) {\\n    \\t        id\\n                createdAt\\n                updatedAt\\n                name\\n                discussions {\\n                    id\\n                    title\\n                }\\n                spaces {\\n                    id\\n                    name\\n                }\\n                groups {\\n                    id\\n                    name\\n                }\\n                followers {\\n                    id\\n                    name\\n                }\\n                following {\\n                    id\\n                    name\\n                }\\n                likedDiscussions {\\n                    id\\n                    title\\n                }\\n                    sharedDiscussions {\\n                    id\\n                    title\\n                }\\n                savedDiscussions {\\n                    id\\n                    title\\n                }\\n                savedGroups {\\n                    id\\n                    name\\n                }\\n                savedSpaces {\\n                    id\\n                    name\\n                }\\n                adminOfGroup {\\n                    id\\n                    name\\n                }\\n                adminOfSpace {\\n                    id\\n                    name\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport PropTypes from \"prop-types\";\nimport { Spinner } from \"reactstrap\";\nvar USER_QUERY = gql(_templateObject());\n\nvar UserDataProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserDataProvider, _React$Component);\n\n  function UserDataProvider() {\n    _classCallCheck(this, UserDataProvider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UserDataProvider).apply(this, arguments));\n  }\n\n  _createClass(UserDataProvider, [{\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.createElement(Query, {\n        query: USER_QUERY,\n        variables: {\n          id: this.props.id\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (loading) return React.createElement(Spinner, {\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        });\n\n        if (error) {\n          console.log(error);\n        }\n\n        if (data) {\n          var childrenWithProps = React.Children.map(children, function (child) {\n            return React.cloneElement(child, {\n              data: data\n            });\n          });\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, childrenWithProps);\n        }\n      });\n    }\n  }]);\n\n  return UserDataProvider;\n}(React.Component);\n\nUserDataProvider.propTypes = {\n  id: PropTypes.string.isRequired\n};\nexport default UserDataProvider;","map":{"version":3,"sources":["/home/addy/Documents/collab-admin-functions-prototype/src/dataproviders/UserDataProvider.js"],"names":["React","Query","gql","PropTypes","Spinner","USER_QUERY","UserDataProvider","children","props","id","loading","error","data","console","log","childrenWithProps","Children","map","child","cloneElement","Component","propTypes","string","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,cAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,YAAxB;AAEA,IAAMC,UAAU,GAAGH,GAAH,mBAAhB;;IA+DMI,gB;;;;;;;;;;;;;6BACO;AAAA,UACGC,QADH,GACgB,KAAKC,KADrB,CACGD,QADH;AAGL,aACI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEF,UAAd;AAA0B,QAAA,SAAS,EAAE;AAACI,UAAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC;AAAhB,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,gBAA8B;AAAA,YAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,YAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAC1B,YAAIF,OAAJ,EAAa,OAAQ,oBAAC,OAAD;AAAS,UAAA,KAAK,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;;AACb,YAAIC,KAAJ,EAAW;AAAEE,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAAqB;;AAElC,YAAIC,IAAJ,EAAU;AACN,cAAMG,iBAAiB,GAAGf,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmBV,QAAnB,EAA6B,UAAAW,KAAK;AAAA,mBACxDlB,KAAK,CAACmB,YAAN,CAAmBD,KAAnB,EAA0B;AAAEN,cAAAA,IAAI,EAAEA;AAAR,aAA1B,CADwD;AAAA,WAAlC,CAA1B;AAIA,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAMG,iBAAN,CAAP;AACH;AACJ,OAbT,CADJ;AAkBH;;;;EAtB0Bf,KAAK,CAACoB,S;;AAyBrCd,gBAAgB,CAACe,SAAjB,GAA6B;AACzBZ,EAAAA,EAAE,EAAEN,SAAS,CAACmB,MAAV,CAAiBC;AADI,CAA7B;AAIA,eAAejB,gBAAf","sourcesContent":["import React from \"react\";\nimport {Query} from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport PropTypes from \"prop-types\";\n\nimport { Spinner } from \"reactstrap\";\n\nconst USER_QUERY = gql`\n    query GetUser($id: ID) {\n        {\n            user(\n                id: $id\n            ) {\n    \t        id\n                createdAt\n                updatedAt\n                name\n                discussions {\n                    id\n                    title\n                }\n                spaces {\n                    id\n                    name\n                }\n                groups {\n                    id\n                    name\n                }\n                followers {\n                    id\n                    name\n                }\n                following {\n                    id\n                    name\n                }\n                likedDiscussions {\n                    id\n                    title\n                }\n                    sharedDiscussions {\n                    id\n                    title\n                }\n                savedDiscussions {\n                    id\n                    title\n                }\n                savedGroups {\n                    id\n                    name\n                }\n                savedSpaces {\n                    id\n                    name\n                }\n                adminOfGroup {\n                    id\n                    name\n                }\n                adminOfSpace {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`;\n\nclass UserDataProvider extends React.Component {\n    render() {\n        const { children } = this.props;\n\n        return(\n            <Query query={USER_QUERY} variables={{id: this.props.id}}>\n                {\n                    ({ loading, error, data }) => {\n                        if (loading) return (<Spinner color=\"primary\" />);\n                        if (error) { console.log(error); }\n\n                        if (data) {\n                            const childrenWithProps = React.Children.map(children, child =>\n                                React.cloneElement(child, { data: data })\n                              );\n                          \n                            return <div>{childrenWithProps}</div>\n                        }\n                    }\n                }\n            </Query>\n        );\n    }\n}\n\nUserDataProvider.propTypes = {\n    id: PropTypes.string.isRequired\n}\n\nexport default UserDataProvider;"]},"metadata":{},"sourceType":"module"}